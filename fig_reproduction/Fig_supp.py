#!/usr/bin/env python
# coding: utf-8

# In[57]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

def plot_combined(output_file,
                  group_Ds,
                  title,
                  bar_color='dodgerblue',
                  point_color='dodgerblue',
                  non_sig=None,
                  figsize=(18, 14),
                  group_spacing=2.0,
                  bar_width=0.6,
                  dot_offset=0.7,
                  dot_jitter=0.02,
                  error_elinewidth=3,
                  error_capthick=3,
                  ax=None):

    # 1) Load data
    data = pd.read_csv(output_file, sep="\t")
    group_obs, group_sim = {}, {}
    for _, row in data.iterrows():
        n = len(row['Strain Combination'].split(','))
        if n == 2:
            continue
        group_obs.setdefault(n, []).append(row['Observed Ratio (%)'] / 100)
        group_sim.setdefault(n, []).append(row['Simulated Mean (%)'] / 100)

    Ns = sorted(group_obs)
    obs_means = [np.mean(group_obs[n]) for n in Ns]
    sim_means = [np.mean(group_sim[n]) for n in Ns]
    obs_ses   = [np.std(group_obs[n], ddof=1)/np.sqrt(len(group_obs[n])) for n in Ns]
    sim_ses   = [np.std(group_sim[n], ddof=1)/np.sqrt(len(group_sim[n])) for n in Ns]

    x = np.arange(len(Ns)) * group_spacing
    width = bar_width

    # 2) Axes
    if ax is None:
        fig, ax1 = plt.subplots(figsize=figsize)
    else:
        fig = ax.figure
        ax1 = ax

    # 3) Bars
    err_kwargs = dict(elinewidth=error_elinewidth, capthick=error_capthick, capsize=10)
    ax1.bar(x - width/2, obs_means, width, yerr=obs_ses, error_kw=err_kwargs,
            color=bar_color, label="Observed mean")
    ax1.bar(x + width/2, sim_means, width, yerr=sim_ses, error_kw=err_kwargs,
            color='grey', label="Simulated mean")

    ax1.set_ylabel("Mean Diceâ€™s coefficient", fontsize=28)
    ax1.set_xticks(x)
    ax1.set_xticklabels([f"{n} lines" for n in Ns], fontsize=24, rotation=45)
    ax1.tick_params(axis='y', labelsize=24, length=8, width=2)
    ax1.tick_params(axis='x', labelsize=24, length=8, width=2)

    # 4) Overlay dots
    ax2 = ax1.twinx()
    for i, n in enumerate(Ns):
        Ds = np.array(group_Ds.get(n, []))
        xpos_base = x[i] + width/2 + dot_offset
        xpos = xpos_base + np.random.normal(scale=dot_jitter, size=len(Ds))

        nonsig_idxs = set()
        if non_sig and n in non_sig:
            raw = non_sig[n]
            for item in raw:
                if isinstance(item, int) and 0 <= item < len(Ds):
                    nonsig_idxs.add(item)
                else:
                    matches = np.where(Ds == item)[0]
                    nonsig_idxs.update(matches.tolist())

        for xi, Dval, idx in zip(xpos, Ds, range(len(Ds))):
            color = 'grey' if idx in nonsig_idxs else point_color
            ax2.scatter(xi, Dval, s=100, color=color, alpha=0.75, zorder=2)

    ax2.set_ylabel("$\it{Z}$-score", fontsize=28)
    ax2.tick_params(axis='y', labelsize=24, length=8, width=2)
    ax2.set_ylim(-2, None)

    sns.despine(ax=ax1, top=True, right=False)
    sns.despine(ax=ax2, top=True, right=False)
    ax1.set_title(title, fontsize=30)

    return fig, ax1, ax2


# # Fig S1

# In[58]:


### Fig S1
group_Ds_deg_ecoli_k12_42C = {3: [52.23, 54.62, 58.69, 34.24, 38.98, 41.62, 57.97, 46.79, 48.88, 57.02, 
    34.77, 39.58, 40.83, 57.31, 46.76, 50.18, 42.85, 47.47, 54.39, 45.55, 
    57.08, 33.29, 42.53, 40.38, 57.06, 48.94, 61.55, 59.30, 33.53, 59.68, 
    52.74, 42.48, 60.01, 37.61, 65.61, 44.77, 77.94, 98.71, 43.86, 51.55, 
    50.82, 92.13, 66.04, 81.11, 41.40, 48.21, 52.66, 71.90, 63.11, 45.19, 
    64.77, 53.85, 100.50, 71.81, 26.56, 37.10, 42.67, 35.93, 34.62, 55.44, 
    47.90, 47.27, 48.60, 68.43, 82.16, 39.86, 48.39, 48.98, 72.38, 67.15, 
    47.71, 65.97, 52.56, 101.27, 75.31, 32.73, 36.42, 47.49, 38.95, 36.05, 
    59.32, 46.88, 50.36, 46.22, 66.33, 41.43, 52.12, 51.41, 74.23, 68.05, 
    38.87, 57.10, 38.64, 54.25, 49.72, 44.53, 61.16, 45.12, 73.10, 57.57, 
    31.99, 35.30, 45.57, 39.58, 36.55, 62.06, 52.79, 50.48, 46.41, 72.23, 
    48.53, 32.07, 51.04, 33.72, 63.55, 36.94, 30.87, 61.35, 48.81, 40.66],
    4: [131.14, 120.93, 82.88, 102.40, 72.68, 105.19, 95.95, 86.07, 110.68, 93.85,
    135.43, 111.57, 64.42, 72.66, 86.87, 80.51, 73.59, 117.94, 100.57, 101.21,
    96.78, 125.49, 104.98, 66.49, 112.62, 66.17, 125.40, 75.08, 66.38, 122.63,
    89.05, 83.17, 218.77, 110.08, 128.65, 128.96, 196.69, 175.24, 124.35, 189.67,
    141.44, 248.32, 190.27, 75.78, 89.91, 122.77, 100.07, 91.87, 154.86, 117.94,
    135.24, 113.51, 192.46, 104.41, 142.32, 135.25, 220.26, 187.16, 68.80, 91.80,
    97.40, 94.78, 87.73, 123.95, 114.78, 115.64, 124.67, 150.73, 79.98, 89.07,
    114.77, 98.29, 94.34, 173.60, 137.82, 139.17, 123.65, 197.68, 61.92, 68.24,
    64.09, 80.29, 85.16, 90.97, 75.07, 84.74, 124.98, 106.83, 114.89, 153.87,
    130.17, 215.63, 183.88, 76.14, 86.53, 113.21, 99.92, 87.42, 128.95, 124.38,
    123.49, 123.92, 173.28, 90.71, 100.72, 131.13, 107.79, 104.58, 173.68, 144.26,
    139.48, 125.53, 201.77, 68.12, 87.21, 76.22, 90.49, 83.64, 102.51, 92.90,
    84.91, 126.31, 116.25, 71.68, 90.71, 103.06, 97.92, 93.81, 138.16, 128.81,
    120.81, 127.25, 167.09, 93.36, 67.28, 99.82, 82.47, 125.82, 90.18, 76.92,
    121.49, 108.05, 107.63, 67.42, 83.85, 77.41, 88.83, 84.63, 103.69, 95.74,
    85.13, 138.63, 110.14, 60.46, 115.17, 70.47, 81.24, 72.89],
    5: [175.66, 209.54, 188.80, 193.83, 263.75, 251.66, 237.54, 251.26, 356.83, 
    199.04, 137.01, 199.39, 170.71, 267.02, 183.21, 166.71, 242.00, 220.85, 
    223.19, 132.10, 171.41, 162.29, 166.45, 176.71, 205.97, 196.08, 176.34, 
    267.92, 243.75, 126.41, 261.23, 145.16, 156.10, 167.87, 275.04, 435.63,
    352.21, 670.80, 482.05, 185.35, 248.84, 294.54, 231.81, 227.05, 369.16,
    321.87, 343.81, 338.76, 470.71, 230.34, 259.35, 338.62, 272.49, 307.94,
    495.22, 357.68, 399.95, 388.11, 555.33, 155.48, 228.45, 174.29, 229.59, 
    210.14, 290.45, 242.83, 236.51, 346.18, 302.94, 185.68, 233.23, 282.46,
    248.98, 232.29, 368.63, 349.49, 388.90, 309.39, 456.24, 159.53, 164.97,
    157.51, 192.97, 222.18, 239.98, 189.39, 208.97, 283.89, 283.06, 165.12,
    208.87, 186.74, 219.30, 236.93, 301.26, 255.75, 214.06, 388.71, 318.87,
    139.39, 151.54, 173.20, 203.79, 175.43, 198.71, 252.16, 302.41, 268.91,
    234.07, 422.37, 397.36, 370.92, 342.70, 539.54, 169.80, 204.53, 186.78,
    242.96, 216.88, 250.00, 258.99, 209.58, 311.23, 291.98, 193.63, 251.23,
    200.12, 275.55, 259.03, 299.89, 275.04, 247.59, 434.98, 360.41, 168.93,
    165.24, 203.97, 208.76, 223.64, 157.38, 183.08, 188.07, 220.83, 229.15,
    277.03, 219.62, 239.76, 310.73, 314.84, 154.76, 239.98, 168.43, 203.12,
    182.35, 179.52, 152.26, 190.83, 203.56, 222.99, 149.06],
    6:[408.94, 529.53, 556.84, 395.73, 422.93, 444.05, 471.75, 418.08, 414.46, 
    484.65, 441.46, 746.98, 575.76, 318.85, 364.58, 342.27, 386.42, 470.25,
    454.45, 541.37, 670.32, 587.78, 563.98, 899.92, 621.75, 653.17, 570.42,
    994.89, 360.84, 360.84, 380.30, 567.53, 444.09, 489.03, 608.67, 441.24,
    621.95, 633.35, 433.43, 633.35, 442.41, 518.16, 456.33, 638.23, 709.37,
    489.88, 704.26, 1353.03, 403.23, 370.35, 371.37, 575.76, 549.21, 346.40,
    397.27, 418.22, 483.29, 501.10, 467.41, 462.85, 482.53, 666.94, 528.43,
    299.23, 513.68, 371.22, 425.12, 419.17, 380.62, 350.54, 374.47, 437.61,
    497.52, 307.93, 556.84, 683.33, 670.82, 688.69, 670.32, 1516.93, 944.50,
    1091.61, 793.88, 1758.52, 405.96, 541.42, 448.39, 591.37, 541.42, 766.89,
    549.10, 563.98, 1101.13, 766.89, 561.63, 886.71, 621.21, 606.03, 541.81,
    763.73, 733.58, 644.34, 1025.76, 996.98, 483.29, 363.66, 541.68, 609.03,
    548.94, 488.77, 488.05, 427.76, 935.65, 541.89, 794.06, 827.53, 655.25,
    891.91, 996.98, 369.59, 413.35, 465.92, 512.59, 595.67, 432.26, 387.18,
    621.21, 503.81, 548.07, 337.99, 519.91, 586.55, 515.12, 774.46, 753.68,
    658.03, 853.04, 540.19, 1105.44, 971.46, 450.68, 401.73, 490.82, 528.43,
    633.35, 448.20, 437.88, 592.03, 487.12, 595.52, 499.86, 386.39, 430.01,
    430.86, 612.70, 646.74, 328.55, 412.02],
    7:[1013.90, 966.37, 1454.86, 1045.58, 2815.80, 1645.58, 2088.12,
    2119.75, 2036.81, 864.76, 1499.62, 1898.28, 1013.90, 1279.89,
    1432.47, 1499.62, 1645.58, 1093.11, 918.84, 1206.75, 1029.74,
    1298.17, 1365.32, 2036.81, 2088.12, 1320.56, 864.76, 949.83,
    1133.61, 1206.75, 776.85, 1133.61, 1206.75, 1835.01, 2088.12,
    841.60, 1387.71, 1261.60, 2879.08, 1206.75, 793.88, 669.81,
    1170.18, 1961.56, 1013.90, 1005.61, 950.52, 1454.86, 934.68,
    1170.18, 1060.47, 1499.62, 851.51, 982.21, 1477.24, 1544.39,
    2151.39, 2246.31, 2942.36, 1108.95, 1151.89, 1108.95, 1108.95,
    1045.58, 1279.89, 1961.56, 828.65, 1279.89, 1993.20, 1261.60,
    767.55, 776.85, 633.58, 1225.03, 1432.47, 2151.39, 740.78, 645.81,
    950.52, 2119.75, 949.83, 1115.32, 1170.18, 1499.62, 2309.59,
    1866.65, 998.05, 1243.32, 2056.48, 1342.94, 1898.28, 1093.11,
    1961.56, 2151.39, 1929.92, 1803.37, 878.94, 2056.48, 1151.89,
    1206.75, 934.68, 1060.47, 1410.09, 1499.62, 1633.92, 1206.75,
    2277.95, 1454.86, 1170.18, 1170.18]}

group_Ds_dir_ecoli_k12_42C = {3:  [79.91, 79.87, 85.08, 49.60, 62.83, 59.12, 77.62, 77.93, 68.98, 68.90, 76.34, 84.04, 66.32, 95.09, 45.91, 
                        62.58, 54.22, 77.93, 74.35, 103.71, 90.75, 46.28, 98.57, 87.09, 58.84, 100.01, 53.68, 106.16, 68.96, 99.41, 
                        99.90, 135.51, 61.22, 72.02, 66.64, 122.22, 90.90, 114.87, 61.58, 67.45, 70.57, 95.73, 97.32, 61.85, 84.88, 
                        76.41, 135.78, 109.33, 40.25, 52.13, 54.86, 53.32, 47.47, 75.34, 71.95, 59.24, 68.26, 92.53, 105.74, 52.19, 
                        66.34, 67.56, 95.65, 91.97, 61.64, 90.20, 72.35, 135.04, 105.38, 42.11, 48.86, 56.78, 52.74, 49.44, 73.63, 
                        69.36, 61.17, 63.40, 90.83, 57.80, 57.80, 84.41, 80.97, 63.76, 66.70, 100.37, 76.75, 42.05, 83.40, 45.17, 
                        98.11, 52.30, 40.41, 97.11, 66.20, 55.59],
                4: [233.22, 259.81, 139.69, 184.66, 162.77, 232.89, 228.26, 250.35, 136.51, 177.50, 172.12, 203.44, 233.44, 155.05, 
                        208.31, 180.75, 286.98, 235.87, 101.56, 128.90, 133.52, 132.51, 127.56, 177.35, 179.56, 154.12, 159.39, 213.61, 
                        250.27, 128.10, 161.61, 144.59, 219.93, 201.48, 137.68, 185.58, 163.99, 263.04, 230.42, 110.66, 121.41, 129.78, 
                        123.41, 131.13, 173.93, 161.61, 141.83, 151.81, 200.82, 139.45, 176.61, 169.81, 226.42, 226.86, 152.02, 174.01, 
                        114.15, 183.83, 182.44, 153.75, 222.72, 148.08, 242.22, 193.81, 104.34, 121.78, 133.39, 131.07, 129.46, 189.79, 
                        192.38, 151.57, 160.89, 242.97, 199.30, 104.55, 231.04, 114.71, 233.73, 125.75, 115.99, 240.40, 161.22, 145.13, 
                        330.23, 152.43, 205.55, 198.52, 319.00, 251.14, 184.70, 254.32, 218.31, 384.19, 348.77, 123.07, 136.48, 177.28, 
                        152.45, 135.78, 215.63, 194.13, 184.50, 191.39, 270.13, 159.88, 218.46, 213.99, 331.78, 308.93, 108.23, 142.98, 
                        149.30, 157.10, 135.96, 179.51, 196.67, 173.43, 204.55, 252.30, 119.26, 148.69, 172.83, 165.30, 142.46, 262.13, 
                        246.61, 226.77, 194.29, 331.30, 94.70, 103.67, 107.30, 123.41, 133.69, 137.99, 122.54, 136.93, 215.20, 176.21, 
                        167.75, 167.75, 239.46, 220.02, 325.46, 323.03, 116.87, 127.30, 147.01, 150.92, 127.16, 204.90, 206.51, 167.57, 
                        171.12, 171.12, 140.09, 142.58, 176.30, 174.55, 162.31, 239.60, 238.23, 205.76, 183.06, 303.06, 107.59, 115.99, 
                        115.88, 121.33, 141.71, 151.90, 131.85, 132.78, 201.01, 161.14, 116.34, 151.54, 153.71, 158.71, 142.71, 214.17, 
                        229.57, 190.61, 202.20, 256.46, 190.61, 106.68, 167.32, 124.53, 220.55, 138.59, 108.71, 206.88, 178.57, 168.70, 
                        168.70, 167.75, 123.11, 124.93, 132.06, 132.01, 154.17, 140.79, 141.14, 231.30, 171.39, 90.14, 204.69, 111.89, 
                        114.82, 117.67],
                5: [666.94, 418.32, 547.33, 449.86, 629.14, 685.90, 483.70, 634.52, 431.98, 847.25, 711.23, 307.18, 356.75, 383.46, 
                        402.94, 397.02, 543.94, 527.52, 462.56, 464.65, 635.05, 435.72, 639.55, 585.57, 735.57, 753.08, 270.67, 320.46, 
                        361.84, 364.76, 364.35, 476.51, 550.75, 381.04, 480.02, 576.59, 310.81, 379.47, 381.04, 368.33, 440.81, 606.57, 
                        530.17, 467.41, 480.13, 953.33, 252.58, 277.42, 316.12, 277.09, 375.84, 424.42, 313.41, 332.03, 520.26, 432.55, 
                        412.20, 528.05, 513.51, 744.50, 646.38, 282.80, 309.25, 383.66, 386.32, 349.95, 535.05, 500.32, 386.13, 498.52, 
                        579.19, 307.07, 365.79, 402.43, 383.52, 342.53, 597.76, 564.58, 534.56, 444.09, 936.66, 284.29, 285.45, 297.33, 
                        314.40, 340.72, 392.73, 377.43, 342.81, 453.39, 438.32, 293.67, 328.83, 367.27, 383.89, 389.85, 545.00, 498.67, 
                        407.91, 544.28, 625.55, 416.02, 266.30, 446.17, 330.27, 616.96, 357.00, 350.63, 501.58, 510.08, 452.28, 255.18, 
                        302.47, 354.11, 342.72, 322.05, 362.87, 339.92, 429.67, 590.28, 433.62, 266.74, 577.70, 285.71, 315.69, 309.49, 
                        542.15, 649.24, 771.34, 789.85, 900.74, 349.06, 362.87, 418.56, 502.98, 401.63, 611.42, 684.79, 661.36, 509.83, 
                        843.74, 393.36, 420.27, 566.88, 484.76, 535.57, 767.01, 763.40, 645.42, 674.48, 995.71, 304.77, 349.29, 313.24, 
                        391.58, 381.76, 518.09, 452.28, 432.55, 628.72, 546.87, 363.84, 423.88, 585.57, 488.39, 438.32, 684.79, 663.34, 
                        592.71, 634.51, 1150.39, 286.02, 270.84, 347.86, 346.40, 438.32, 428.46, 369.46, 414.74, 544.45, 599.86, 294.90, 
                        373.68, 351.13, 395.76, 396.74, 433.75, 416.03, 460.51, 864.14, 658.03, 253.95, 304.18, 311.26, 381.61, 348.76, 
                        387.26, 406.91, 531.47, 490.90, 484.76, 799.86, 813.70, 565.69, 519.10, 857.00, 309.87, 321.28, 352.59, 351.92, 
                        379.17, 511.18, 420.27, 415.08, 543.77, 496.02, 288.01, 450.72, 396.60, 468.55, 366.61, 456.88, 452.73, 446.00, 
                        751.24, 723.79, 306.00, 298.33, 387.26, 414.06, 321.34, 302.90, 342.09, 408.03, 385.77, 423.12, 437.98, 397.04, 
                        388.58, 584.79, 524.26, 256.79, 461.57, 367.68, 353.41, 385.69, 296.22, 248.97, 342.53, 473.82, 392.37, 246.82],
                6: [1108.95, 1457.50, 2081.58, 3037.27, 978.19, 867.50, 1006.54, 1353.03, 774.46, 2847.44, 1505.03, 904.85, 1633.92, 
                        2215.88, 1243.32,1566.77, 2214.67, 1061.42, 3005.64, 3005.64, 2119.75, 1566.77, 1360.98, 767.55, 964.01, 
                        1093.11, 815.70, 867.50, 1020.72, 1477.24, 1243.32, 1489.19, 2246.31, 1225.03, 978.19, 1243.32, 2309.59, 906.34, 
                        2910.72, 1810.15, 2183.03, 1371.31, 3100.55, 573.69, 828.65, 1009.93, 878.94, 1134.14, 1020.72, 1013.90, 1035.83, 
                        1230.06, 1124.80, 1387.71, 1045.58, 730.52, 1115.32, 1077.27, 978.19, 1188.46, 1261.60, 1133.67, 934.68, 808.13, 
                        709.35, 707.11, 1188.46, 1124.80, 1061.42, 2183.03, 1656.30, 851.51, 1457.50, 3132.19, 1544.39, 3068.91, 992.36, 
                        815.53, 923.48, 907.30, 875.50, 887.50, 880.44, 851.56, 1737.01, 841.60, 2183.03, 2277.95, 998.05, 1061.42, 1566.77,
                        1077.27, 2246.31, 2214.67, 1170.18, 906.34, 1093.11, 718.33, 880.44, 719.94, 935.65, 1091.61, 1151.89, 783.47, 
                        1589.15, 1061.42, 815.23, 1389.34, 932.24, 653.17, 1358.18, 819.36, 851.51, 688.95, 1387.71, 683.33, 1006.54, 
                        907.30, 964.01, 623.08, 1566.77, 2151.39, 1371.31, 1188.17, 1279.89, 2283.03, 1679.31, 2404.50, 3511.85, 841.60, 
                        1261.60, 1034.90, 1045.58, 1589.15, 1251.54, 1061.42, 1615.93, 1022.88, 1170.18, 1633.92, 1006.54, 1188.46, 
                        1499.62, 2341.22, 1566.77, 2327.79, 1371.31, 802.75, 677.58, 1316.46, 1206.75, 1243.32, 815.70, 1225.03, 
                        1298.17,1334.74, 1371.31, 1045.58, 945.19, 3290.38, 2436.14, 934.68, 1188.17, 730.52, 693.38, 1243.32, 850.59,
                        1993.20, 1108.95, 1206.75, 1061.42, 719.58, 752.01, 1156.48, 897.94, 1045.58, 1156.48, 1105.78, 1279.89, 1426.16, 
                        3385.30, 1119.96, 755.56, 699.78, 773.78, 992.36, 1140.64, 921.47, 763.23, 1077.43, 803.54, 2277.95, 677.58, 633.07,
                        1049.07, 792.66, 1279.89, 945.19, 661.43, 841.60],
                7: [1993.20, 2088.12, 2119.75, 1961.56, 2088.12, 1866.65, 1835.01, 1929.92, 1432.47, 2847.44, 1803.37, 1898.28, 
                        1993.20, 2056.48, 2056.48, 2183.03, 1929.92, 1993.20, 1740.09, 1320.56, 1253.41, 1929.92, 1993.20, 2024.84, 
                        2183.03, 2088.12, 1961.56, 1060.47, 2056.48, 1320.56, 1835.01, 1803.37, 2183.03, 1929.92, 1993.20, 2246.31, 
                        1365.32, 1115.32],
                8: [1771.73, 1993.2]}

group_Ds_mag_ecoli_k12_42C = {3: [33.19, 15.67, 30.41, 20.95, 8.12, 24.20, 26.02, 8.53, 20.17, 18.93, 13.36,
    17.31, 16.17, 29.48, 23.86, 21.63, 19.46, 25.71, 35.92, 19.12, 43.13,
    16.02, 8.84, 20.65, 17.45, 16.42, 56.95, 52.33, 20.26, 40.25, 41.94,
    12.36, 33.83, 17.89, 54.46, 17.69, 42.12, 76.03, 20.93, 13.89, 19.81,
    56.22, 38.84, 50.45, 18.24, 20.81, 24.36, 38.07, 45.89, 18.86, 40.03,
    27.56, 48.53, 59.41, 6.52, 22.60, 36.49, 19.01, 8.30, 21.12, 17.67,
    23.44, 20.15, 33.66, 44.28, 6.44, 20.79, 19.10, 35.20, 41.63, 17.37,
    26.57, 21.70, 47.28, 39.66, 8.86, 16.22, 18.61, 14.88, 17.52, 17.20,
    30.51, 17.60, 22.98, 36.89, 25.03, 26.51, 25.04, 43.32, 63.06, 18.29,
    30.89, 22.53, 30.22, 29.78, 19.00, 44.16, 21.81, 61.69, 33.15, 10.30,
    17.32, 26.05, 22.12, 15.72, 17.85, 34.36, 24.41, 22.48, 32.17, 31.82,
    9.04, 29.49, 19.96, 46.96, 18.91, 8.95, 45.22, 24.53, 16.38],
    4: [47.89, 109.65, 71.88, 16.33, 44.81, 56.04, 38.24, 42.46, 6.38, 15.34,
    47.89, 38.24, 13.47, 44.99, 23.90, 54.99, 44.03, -0.11, 6.52, 33.20,
    59.89, 12.91, 17.54, 8.10, 6.83, 51.13, 8.71, 15.81, 35.20, 7.84, 35.20,
    33.93, 38.24, 64.18, 22.43, 18.26, 47.47, 35.90, 19.05, 7.00, 20.30, 
    37.47, 5.89, 42.44, 21.08, 19.44, 36.63, 23.08, 40.10, 36.63, 9.95, 
    42.44, 24.56, 45.81, 43.82, 37.54, 6.00, 42.26, 65.78, 26.37, 58.65, 
    33.93, 114.94, 36.48, 7.19, 37.47, 40.69, 21.29, 18.26, -0.10, 13.19,
    38.24, 24.56, 8.39, 93.62, 5.89, 55.83, 23.66, 85.69, 15.81, 14.14,
    69.60, 33.20, 12.90, 201.08, 30.77, 40.10, 50.15, 89.71, 57.42, 64.67,
    73.08, 59.89, 142.52, 42.26, 7.39, 30.81, 60.20, 42.71, 19.07, 16.33,
    16.90, 70.82, 35.90, 95.20, 36.63, 42.26, 52.85, 84.61, 90.35, 16.90,
    34.72, 52.03, 43.81, 19.07, 25.41, 61.68, 31.67, 50.95, 52.85, 9.48,
    57.42, 63.63, 36.63, 27.44, 41.01, 33.59, 74.03, 42.44, 47.89, -0.17,
    13.47, 12.17, 43.02, 39.05, 41.70, -0.14, 7.60, 30.05, 38.24, 27.44,
    56.64, 36.63, 84.99, 201.08, 8.10, 23.78, 35.15, 27.44, 25.41, 33.93,
    89.71, 44.81, 33.93, 95.87, 9.07, 42.26, 36.63, 40.10, 7.39, 21.08,
    41.01, 17.54, 19.07, 42.46, 22.43, 8.10, 13.19, 44.03, 37.47, 37.47,
    21.81, 40.10, 71.88, 44.03, 25.46, 37.42, 76.59, 61.68, 42.26, 51.72,
    95.77, 54.99, 63.44, 67.01, 50.11, 19.06, 22.90, 41.01, 58.65, 38.55,
    29.62, 71.29, 67.01, 64.67, 28.39, 22.43, 23.78, 54.99, 49.24, 52.85,
    11.14, 28.62, 42.26, 47.89, 14.51, 60.51, 14.91, 45.58, 45.81],
    5:[63.25, 31.61, 44.72, 31.61, -0.03, 67.1, 89.49, 31.61, 31.61, 36.51, -0.03, 
       31.61, -0.03, 18.23, -0.03, 94.88, -0.05, -0.04, -0.05, -0.03, 42.46, -0.03, 
       -0.03, -0.03, 31.61, 31.61, 63.25, -0.03, 31.61, 31.61, 67.1, -0.03, -0.03, 31.61,
       -0.03, -0.03, 31.61, 31.61, -0.03, 63.25, -0.03, 44.72, -0.06, 94.88, 22.34, 31.61, 
       -0.03, 31.61, -0.03, -0.03, 134.25, -0.03, -0.05, -0.04, 94.88, 63.25, 63.25, 63.25,
       -0.03, 94.88, -0.03, 63.25, 63.25, 63.25, -0.03, -0.03, 18.23, 94.88, 94.88, -0.03, 
       31.61, 22.34, -0.04, 22.34, -0.04, 126.52, 94.88, -0.03, 31.61, 63.25, -0.03, -0.03,
       -0.03, 94.88, -0.03, 63.25, 31.61, -0.03, 63.25, 44.72, 63.25, -0.03, -0.03, 44.72, 
       -0.03, 31.61, 63.25, 44.72, 67.1, 89.49, 94.88, 63.25, 44.72, 63.25, 63.25, 44.72, 31.61, -0.04, 18.23],
    6:[-0.03, 94.88, -0.03, -0.03, -0.03]}

input_files_ecoli_k12_42C = [
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_k12_42C/ecoli_k12_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_k12_42C/ecoli_k12_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_k12_42C/ecoli_k12_same_magnitude.txt'
]

group_D_sets_ecoli_k12_42C = [group_Ds_deg_ecoli_k12_42C, group_Ds_dir_ecoli_k12_42C, group_Ds_mag_ecoli_k12_42C]

bar_colors = ['dodgerblue', 'orange', 'red']
title = '$\it{E. coli}$ K-12 in 42Â°C'   

fig, axes = plt.subplots(1, 3, figsize=(45, 14))

for ax, infile, Ds, color in zip(axes, input_files_ecoli_k12_42C, group_D_sets_ecoli_k12_42C, bar_colors):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title,
        bar_color=color,
        point_color=color,
        ax=ax
    )

plt.tight_layout()
plt.show()


# # Fig S2

# In[59]:


### Fig S2

group_Ds_dir_ecoli_11_envs = {
    "Cro": {3: [474.55, 1202.24, 442.91, 290.94, 237.65, 411.27, 237.65]},
    "KCl": {3: [158.16, 44.72]},
    "BuOH":{3:[316.35, 379.63]},
    "CoCl2":{3:[380.47, 569.46]},
    "NaCl":{3:[316.35, 316.35, 221.44]},
    "Lac":{3:[63.25]},
    "Mal":{3:[]},
    "MCL":{3:[189.80, 126.52, 94.88]},
    "MG":{3:[626.68, 310.79, 949.13, 537.82, 604.30, 537.82, 380.47, 604.30, 269.27, 380.47]},
    "Na2CO3":{3:[917.49, 790.93, 475.35, 514.77, 822.57, 537.15, 604.30, 493.64, 604.30, 354.37]},
    "CPC":{3:[73.98, -0.03]}  
}
group_Ds_deg_ecoli_11_envs = {
    "Cro": {3: [274.22, 601.97, 198.42, 205.9, 313.32, 237.65, 205.9, 274.22, 155.84, 290.94]},
    "KCl": {3: [189.8, 63.25, 31.61, 189.8]},
    "BuOH": {3: [316.35, 379.63, 316.35, 164.51, 253.08, 201.4, 253.08]},
    "CoCl2": {3: [126.52, 269.27, 569.46, 94.88, 601.1]},
    "NaCl": {3: [223.79, 223.79, 99.17, 127.94]},
    "Lac": {3: [67.1,126.52]},
    "Mal": {3: []},
    "MCL": {3: [158.16, 134.25, 94.88, 89.49, 158.16, 201.08]},
    "MG": {3: [335.76, 269.27, 548.49, 220.05, 493.64, 220.05, 310.79, 604.3, 310.79, 269.27]},
    "Na2CO3": {3: [347.75, 354.37, 275.21, 211.12, 238.67, 380.17, 493.64, 382.72, 349.54, 457.07],4:[727.66]},
    "CPC": {3: [-0.04, 63.31, 158.16, 109.65, 54.8]}  
}
group_Ds_mag_ecoli_11_envs = {
    "Cro": {3: [474.55, 313.32, 255.93, 411.27, 290.94, 474.55, 411.27, 411.27]},
    "KCl": {3: [126.52]},
    "BuOH": {3: []},
    "CoCl2": {3: [44.19,94.88,402.85]},
    "NaCl": {3: [316.35]},
    "Lac": {3: [63.25]},
    "Mal": {3: []},
    "MCL": {3: [94.88,94.88]},
    "MG": {3: [626.68, 537.82, 537.82, 854.21, 380.47]},
    "Na2CO3": {3: [917.49, 514.77, 457.07, 664.38, 326.01, 790.93, 411.86]},
    "CPC": {3: []}  
}


def format_env_name(env_name):
    return env_name.replace("2", r"$_2$").replace("3", r"$_3$")

def plot_all_environments(env_directory, group_Ds, title_suptitle, rows=3, cols=4, sig_cutoff=1.96, bar_color='dodgerblue', point_color='dodgerblue'):
    files = sorted(f for f in os.listdir(env_directory) if f.endswith(".txt"))
    num_files = len(files)
    fig, axes = plt.subplots(rows, cols, figsize=(22, rows * 4))
    axes = axes.flatten()
    for idx, file in enumerate(files):
        ax = axes[idx]
        env = file.replace(f"_same_{os.path.basename(env_directory)}.txt", "").replace("_same_genes.txt","").replace("_same_direction.txt","").replace("_same_magnitude.txt","")
        formatted = format_env_name(env)
        fp = os.path.join(env_directory, file)
        data = pd.read_csv(fp, sep="\t")
        def _n_of(combo): return len([p.strip() for p in str(combo).split(',') if p.strip()])
        max_strains = max(_n_of(s) for s in data['Strain Combination'])
        ns = [n for n in range(3, max_strains + 1)]
        grouped = {}
        for n in ns:
            mask = data['Strain Combination'].apply(lambda s: _n_of(s) == n)
            sub = data[mask]
            if len(sub) == 0: continue
            obs_vals = (sub['Observed Ratio (%)'] / 100.0).to_numpy()
            sim_vals = (sub['Simulated Mean (%)'] / 100.0).to_numpy()
            grouped[n] = {'obs_mean': np.mean(obs_vals), 'sim_mean': np.mean(sim_vals),
                          'obs_se': np.std(obs_vals, ddof=1)/np.sqrt(len(obs_vals)) if len(obs_vals) > 1 else 0.0,
                          'sim_se': np.std(sim_vals, ddof=1)/np.sqrt(len(sim_vals)) if len(sim_vals) > 1 else 0.0}
        if not grouped:
            ax.axis('off')
            continue
        Ns = sorted(grouped)
        x = np.arange(len(Ns))
        width = 0.35
        err_kw = dict(elinewidth=2, capsize=5, capthick=2)
        obs_means = [grouped[n]['obs_mean'] for n in Ns]
        sim_means = [grouped[n]['sim_mean'] for n in Ns]
        obs_ses = [grouped[n]['obs_se'] for n in Ns]
        sim_ses = [grouped[n]['sim_se'] for n in Ns]
        ax.bar(x - width/2, obs_means, width, yerr=obs_ses, error_kw=err_kw, color=bar_color)
        ax.bar(x + width/2, sim_means, width, yerr=sim_ses, error_kw=err_kw, color='grey')
        ax.set_xticks(x)
        ax.set_xticklabels([f"{n} lines" for n in Ns], fontsize=14)
        ax.set_ylabel("Mean Diceâ€™s coefficient", fontsize=16)
        ax.tick_params(axis='y', labelsize=14, length=6, width=2)
        ax.tick_params(axis='x', labelsize=14, length=6, width=2)
        ax.set_title(formatted, fontsize=18)
        ax2 = ax.twinx()
        all_xpos, all_D = [], []
        for i, n in enumerate(Ns):
            Ds = group_Ds.get(env, {}).get(n, [])
            if not Ds: continue
            xpos = np.random.normal(loc=(i + width/2), scale=0.02, size=len(Ds))
            all_xpos.extend(xpos)
            all_D.extend(Ds)
        if all_D:
            colors = [point_color if d >= sig_cutoff else 'grey' for d in all_D]
            ax2.scatter(all_xpos, all_D, s=75, c=colors, alpha=0.75)
            ax2.set_ylim(-2, max(all_D) * 1.05)
        ax2.set_ylabel(r"$\it{Z}$-score", fontsize=16)
        ax2.tick_params(axis='y', labelsize=14, length=6, width=2)
        sns.despine(ax=ax, top=True, right=False)
        sns.despine(ax=ax2, top=True, left=False)
    for ax in axes[num_files:]:
        fig.delaxes(ax)
    fig.suptitle(title_suptitle, fontsize=24, y=0.93)
    plt.tight_layout(rect=[0, 0.05, 1, 0.93])
    plt.show()

plot_all_environments("/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/same_genes", group_Ds_deg_ecoli_11_envs, r"$\it{E. coli}$", bar_color='dodgerblue', point_color='dodgerblue')
plot_all_environments("/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/same_direction", group_Ds_dir_ecoli_11_envs, r"$\it{E. coli}$", bar_color='orange', point_color='orange')
plot_all_environments("/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/same_magnitude", group_Ds_mag_ecoli_11_envs, r"$\it{E. coli}$", bar_color='red', point_color='red')


# # Fig S3

# In[60]:


### Fig S3

df_mag = pd.read_csv('/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/Z-score/ecoli_LTEE_same_magnitude_z.txt', sep='\t')
group_Ds_mag_ecoli_ltee = {i: [] for i in range(3, 11)} 

for n in group_Ds_mag_ecoli_ltee:
     group_Ds_mag_ecoli_ltee[n] = df_mag.loc[df_mag['n_lines'] == n, 'D_stat'].tolist()

df_deg = pd.read_csv('/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/Z-score/ecoli_LTEE_same_genes_z.txt', sep='\t')

df_deg['n_strains'] = df_deg['lines'].str.count(r'\|') + 1

group_Ds_deg_ecoli_ltee = {3: [], 4: [],5:[],6:[],7:[],8:[],9:[],10:[]}
for deg in group_Ds_deg_ecoli_ltee:
    group_Ds_deg_ecoli_ltee[deg] = df_deg.loc[df_deg['n_strains'] == deg, 'D_value'].tolist()

group_Ds_dir_ecoli_ltee = {3: [55.91, 64.10, 66.92, 54.03, 56.49, 82.30, 67.60, 49.64, 58.65, 51.21, 46.77, 40.64, 72.36, 51.32, 62.55, 57.56, 
                    41.33, 47.74, 59.35, 64.76, 50.72, 55.78, 43.13, 86.05, 58.38, 58.35, 35.53, 78.45, 47.87, 50.52, 50.04, 41.59, 
                    39.41, 70.60, 70.53, 44.63, 41.40, 54.16, 39.51, 36.58, 62.61, 47.61, 52.06, 39.25, 31.26, 35.74, 46.80, 48.29, 
                    36.07, 50.91, 38.87, 72.75, 55.81, 47.61, 36.44, 64.83, 44.24, 39.13, 44.45, 41.20, 32.36, 58.82, 55.21, 37.44, 
                    46.18, 40.30, 41.05, 55.57, 63.77, 68.67, 51.38, 37.97, 68.34, 46.62, 70.85, 36.47, 65.87, 37.71, 62.27, 46.84, 
                    34.90, 44.85, 57.99, 82.53, 56.08, 40.92, 39.50, 56.72, 51.19, 47.42, 31.99, 52.56, 39.10, 42.52, 40.39, 45.21, 
                    41.20, 55.73, 56.29, 49.02, 45.48, 78.26, 50.01, 57.82, 55.20, 37.81, 49.58, 64.08, 69.24, 44.18, 57.90, 33.67, 
                    42.60, 59.37, 67.74, 42.49, 38.59, 49.66, 34.61, 48.47],
                4: [
    126.50, 126.54, 161.06, 113.32, 106.60, 177.96, 159.33, 114.32, 122.12, 130.47,
    100.66, 87.92, 157.58, 126.94, 121.93, 136.72, 96.75, 93.69, 154.78, 153.07,
    98.53, 135.99, 104.82, 182.79, 163.92, 120.17, 77.47, 150.98, 128.72, 97.07,
    111.00, 105.89, 84.01, 179.67, 127.45, 105.81, 98.79, 138.19, 88.05, 89.29,
    155.62, 112.84, 109.15, 100.66, 72.91, 79.87, 109.05, 121.58, 81.30, 119.90,
    99.59, 175.41, 148.17, 117.69, 71.43, 135.98, 99.95, 90.35, 94.99, 89.46,
    83.16, 152.34, 121.38, 104.51, 107.59, 82.56, 79.46, 127.20, 153.21, 109.83,
    108.08, 92.77, 160.20, 116.80, 135.65, 72.63, 130.49, 95.78, 100.05, 102.45,
    93.91, 90.14, 144.91, 154.89, 115.41, 101.97, 87.93, 134.45, 134.58, 92.02,
    75.60, 121.26, 102.61, 83.46, 100.26, 115.13, 83.78, 155.68, 107.58, 101.59,
    95.04, 162.10, 128.78, 114.90, 110.73, 108.13, 96.33, 184.53, 144.16, 106.98,
    99.29, 85.69, 90.39, 145.24, 125.18, 116.22, 109.94, 106.49, 94.98, 124.55,
    115.85, 140.59, 104.27, 103.21, 176.84, 129.47, 142.92, 109.89, 76.94, 92.65,
    124.46, 126.67, 97.88, 119.71, 99.29, 184.22, 128.93, 124.31, 88.34, 166.58,
    106.75, 101.17, 109.99, 98.60, 90.81, 156.79, 150.37, 107.91, 108.15, 94.20,
    97.05, 141.05, 135.98, 136.53, 109.93, 102.20, 184.23, 119.90, 156.12, 92.12,
    155.73, 103.84, 128.55, 122.71, 103.36, 119.89, 158.00, 202.91, 147.97, 99.86,
    103.68, 151.13, 133.15, 118.37, 70.61, 131.99, 105.65, 99.90, 112.13, 111.24,
    99.33, 162.81, 144.35, 116.48, 96.48, 173.31, 117.80, 121.65, 130.62, 107.75,
    125.66, 186.76, 176.40, 103.29, 119.42, 80.38, 100.08, 160.28, 156.70, 100.69,
    107.81, 134.38, 91.56, 144.29, 98.39, 78.61, 83.50, 112.81, 111.61, 108.43,
    107.88, 95.88, 168.93, 116.75, 146.70, 77.79, 133.03, 92.16, 114.12, 116.02,
    99.85, 92.12, 140.77, 158.04, 116.74, 80.70, 75.13, 107.34, 101.17, 90.57,
    63.75, 95.71, 76.57, 76.54, 88.62, 98.37, 75.89, 110.65, 101.65, 96.12, 90.51,
    148.81, 108.98, 107.64, 116.32, 82.31, 100.26, 146.62, 149.60, 96.04, 114.62,
    76.37, 81.89, 132.49, 124.60, 90.85, 95.85, 112.66, 69.60, 119.68, 106.01,
    92.55, 138.03, 110.96, 137.91, 89.18, 129.57, 88.02, 121.76, 111.12, 93.91,
    112.57, 131.24, 169.13, 131.93, 93.46, 150.02, 95.57, 151.40, 128.54, 86.18,
    124.72, 148.75, 211.20, 117.57, 117.81, 78.11, 109.62, 132.53, 181.69, 115.33,
    106.79, 149.03, 96.00, 144.75, 88.28, 135.95, 105.51, 103.77, 113.62, 103.84,
    108.86, 148.14, 141.94, 102.06, 101.33, 83.28, 89.73, 124.93, 135.09, 94.08,
    101.99, 130.02, 102.76, 116.92, 130.77, 86.79, 121.07, 147.52, 165.30, 100.31,
    113.77, 156.64, 92.43, 118.36, 100.65, 138.09, 84.58, 128.99, 101.49
],
     5: [
    294.90, 401.41, 280.07, 245.69, 445.88, 321.95, 318.00, 304.59, 207.74, 212.67,
    281.82, 307.93, 243.59, 308.39, 246.87, 420.82, 422.42, 317.04, 181.88, 358.32,
    283.11, 243.96, 219.01, 236.95, 219.20, 382.07, 318.27, 278.94, 328.82, 227.04,
    217.23, 357.14, 343.35, 269.66, 291.79, 275.78, 377.02, 331.24, 382.71, 203.57,
    359.98, 223.63, 271.77, 264.52, 308.38, 322.15, 439.48, 417.37, 326.50, 263.07,
    277.66, 334.12, 379.69, 244.26, 205.96, 320.46, 276.52, 202.12, 296.20, 262.39,
    208.76, 447.59, 291.26, 240.49, 226.94, 405.20, 359.77, 263.41],
     6: [
    836.41, 599.63, 414.05, 1060.47, 776.85, 1297.15, 1061.42, 1771.73, 1156.48, 791.54,
    1613.54, 647.36, 921.47, 683.59, 637.92, 839.62, 660.31, 538.68, 1477.24, 1581.90,
    984.81, 493.54, 469.68, 934.68, 1170.18, 767.91, 462.22, 536.79, 1023.90, 517.88,
    575.64, 722.99, 407.72, 1170.18, 1265.51, 749.62, 614.05, 1314.91, 1172.33, 895.90,
    902.99, 468.00, 767.91, 897.94, 1163.88, 822.76, 671.60, 587.64, 595.39, 971.09,
    708.81, 1007.19, 708.81, 567.03, 850.51, 822.76, 673.26, 527.50, 918.84, 918.84, 462.22, 738.01, 751.34, 617.82, 634.42
],
    7: [1074.34, 1645.18, 1676.81, 1265.51, 1044.04, 1360.43, 984.81, 1645.18, 1518.62, 1676.81, 1328.79, 1581.90, 
                    1265.51, 1360.43, 1392.07, 1163.88, 1119.11, 1107.32, 1423.71, 1423.71, 1012.40, 1170.60, 1392.07, 940.04, 
                    1138.96, 980.76],
                8: [1265.51,980.76,1075.68, 1297.15]
} 

input_files_ecoli_ltee = [
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/ecoli_LTEE_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/ecoli_LTEE_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/ecoli_LTEE_same_magnitude.txt'
]

group_D_sets_ecoli_ltee = [group_Ds_deg_ecoli_ltee, group_Ds_dir_ecoli_ltee, group_Ds_mag_ecoli_ltee]

bar_colors = ['dodgerblue', 'orange', 'red']
title = '$\it{E. coli}$ LTEE'   

fig, axes = plt.subplots(1, 3, figsize=(45, 14))

for ax, infile, Ds, color in zip(axes, input_files_ecoli_ltee, group_D_sets_ecoli_ltee, bar_colors):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title,
        bar_color=color,
        point_color=color,
        ax=ax
    )

plt.tight_layout()
plt.show()


# # Fig S4

# In[61]:


###Fig S4

group_Ds_salt_deg = {3: [45.52]}
group_Ds_salt_dir = {3: [52.93]}
group_Ds_salt_mag = {3: [36.54]}
group_Ds_h2o2_deg = {3: [141.44]}
group_Ds_h2o2_dir = {3: [260.31]}
group_Ds_h2o2_mag = {3: [343.41]}

group_Ds_salt_h2o2_deg = {2:[11.19, 10.97, 11.08, 16.53, 17.3, 17.6, 20.04, 21.08, 20.44]}
group_Ds_salt_h2o2_dir = {2:[7.80, 9.53, 8.38, 22.98, 20.95, 21.69, 26.65, 27.81, 27.75]}
group_Ds_salt_h2o2_mag = {2: []} # all inf!

input_files_salt = [
    '/Users/jiachenli/Desktop/Fig_supp_data/yeast/salt_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/yeast/salt_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/yeast/salt_same_magnitude.txt'
]
input_files_h2o2 = [
    '/Users/jiachenli/Desktop/Fig_supp_data/yeast/h2o2_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/yeast/h2o2_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/yeast/h2o2_same_magnitude.txt'
]

group_D_sets_salt = [group_Ds_salt_deg, group_Ds_salt_dir, group_Ds_salt_mag]
group_D_sets_h2o2 = [group_Ds_h2o2_deg, group_Ds_h2o2_dir, group_Ds_h2o2_mag]

col_colors = ['dodgerblue', 'orange', 'red']
title_salt = 'Yeast (salt)'
title_h2o2 = 'Yeast (H$_2$O$_2$)'

fig, axes = plt.subplots(2, 3, figsize=(45, 24))
for j, (ax, infile, Ds, color) in enumerate(zip(axes[0], input_files_salt, group_D_sets_salt, col_colors)):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title_salt,
        bar_color=color,
        point_color=color,
        ax=ax
    )

for j, (ax, infile, Ds, color) in enumerate(zip(axes[1], input_files_h2o2, group_D_sets_h2o2, col_colors)):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title_h2o2,
        bar_color=color,
        point_color=color,
        ax=ax
    )

plt.tight_layout()
plt.show()


# # Fig S5

# In[62]:


## Fig S5

group_Ds_deg_copepod = {3: [105.36, 149.92, 96.91, 228.40], 4: [631.68]}
group_Ds_dir_copepod = {3: [168.44, 244.79, 147.43, 417.78], 4: [1330.76]}
group_Ds_mag_copepod = {3: [30.35, 89.22, 13.44, 32.78], 4: [31.61]}

input_files_copepod = [
    '/Users/jiachenli/Desktop/Fig_supp_data/copepod/copepod_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/copepod/copepod_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/copepod/copepod_same_magnitude.txt'
]

group_D_sets_copepod = [group_Ds_deg_copepod, group_Ds_dir_copepod, group_Ds_mag_copepod]

bar_colors = ['dodgerblue', 'orange', 'red']
title = 'Copepod '   

fig, axes = plt.subplots(1, 3, figsize=(45, 14))

for ax, infile, Ds, color in zip(axes, input_files_copepod, group_D_sets_copepod, bar_colors):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title,
        bar_color=color,
        point_color=color,
        ax=ax
    )

plt.tight_layout()
plt.show()


# # Fig S6

# In[64]:


### Fig S6

group_Ds_deg_fly = {3: [329.07, 137.65, 169.32, 310.79, 269.27, 146.85, 240.95, 135.36, 227.81]}
group_Ds_dir_fly = {3: [569.46, 411.27, 292.50, 269.27, 506.19, 146.58, 347.36]}
group_Ds_mag_fly = {3: [44.01, 32.52, 11.54, 18.75, 37.32, 10.12, 12.19, 5.43, 19.29, 38.70]}

input_files_fly = [
    '/Users/jiachenli/Desktop/Fig_supp_data/fly/fly_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/fly/fly_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/fly/fly_same_magnitude.txt'
]

group_D_sets_fly = [group_Ds_deg_fly, group_Ds_dir_fly, group_Ds_mag_fly]

bar_colors = ['dodgerblue', 'orange', 'red']
title = 'Fly in hot environment'   

fig, axes = plt.subplots(1, 3, figsize=(45, 14))

for ax, infile, Ds, color in zip(axes, input_files_fly, group_D_sets_fly, bar_colors):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title,
        bar_color=color,
        point_color=color,
        ax=ax
    )

plt.tight_layout()
plt.show()


# # Fig S7

# In[65]:


## Fig S7

group_Ds_deg_flower = {3: [75.56, 101.98, 58.07, 54.34, 73.52, 58.64, 114.94, 72.22, 67.66, 99.13, 64.62, 148.24, 119.31, 110.94, 81.16, 128.53, 
                    85.46, 79.49, 93.07, 71.11, 85.29, 101.02, 61.47, 66.56, 146.41, 143.22, 70.01, 59.43, 76.15, 70.04, 59.98, 69.32, 
                    56.81, 60.99, 54.69, 129.59, 72.28, 63.96, 75.26, 80.46, 69.98, 77.13, 63.04, 76.0, 61.2, 142.92, 102.88, 74.69, 76.99, 
                    72.81, 62.52, 71.32, 91.74, 87.12, 84.1, 80.37], 
                4:[312.85, 140.75, 193.8, 257.76, 204.16, 275.41, 359.92, 279.59, 255.15,180.85, 172.86, 134.16, 246.93, 172.91, 262.79, 
                   293.21, 240.39, 328.43, 238.2, 231.11, 232.24, 218.14, 296.85, 234.07, 274.77, 386.76, 412.86, 285.8, 482.32, 328.43, 
                   413.17, 414.81, 335.57, 238.63, 294.08, 216.75, 198.19, 326.54, 247.26, 164.7, 231.02, 188.72, 254.93, 189.96, 504.21, 
                   182.32, 231.94, 203.97, 216.72, 155.56, 236.0, 179.02, 137.1, 209.46, 212.57, 238.2, 234.28, 254.95, 204.8, 174.58, 
                   240.05, 262.04, 206.46, 215.23, 228.45, 224.41, 224.07, 259.98, 253.12, 241.73],
               5: [601.1, 822.57, 885.85, 475.35, 601.1, 425.23, 626.68, 805.75, 696.02, 601.1, 493.64, 790.93, 822.57, 402.85, 475.35, 
                   949.13, 822.57, 1107.32, 1107.32, 783.36, 949.13, 1012.4, 1012.4, 822.57, 805.75, 621.63, 475.35, 790.93, 805.75, 713.05,
                   604.3, 760.98, 681.19, 470.0, 759.29, 559.53, 411.86, 917.49, 1044.04, 693.83, 872.9, 749.62, 1044.04]}

group_Ds_dir_flower = {3: [85.33, 127.87, 55.44, 50.74, 89.19, 66.74, 132.46, 56.89, 73.48, 103.07, 66.03, 194.34, 141.53, 107.64, 90.68, 153.65, 
                    85.81, 87.32, 105.91, 74.41, 104.26, 114.71, 44.85, 47.58, 197.43, 157.93, 73.24, 60.66, 89.1, 77.6, 51.9, 60.26, 47.53,
                    57.09, 51.65, 157.57, 78.73, 70.57, 91.53, 88.56, 54.61, 67.81, 54.83, 66.04, 54.52, 175.93, 113.2, 79.22, 77.55, 75.34,
                    64.21, 77.24, 94.42, 88.67, 89.55, 85.02],
               4:[539.66, 123.99, 152.93, 401.91, 192.97, 443.54, 302.96, 453.61, 263.14, 180.87, 183.25, 146.33, 325.44, 166.41, 340.33, 
                  311.46, 383.39, 340.33, 278.82, 306.69, 233.03, 211.19, 353.63, 211.3, 390.99, 725.06, 323.76, 308.87, 391.86, 376.43, 
                  412.86, 308.87, 275.26, 419.72, 312.78, 257.9, 209.08, 360.9, 288.0, 176.26, 182.07, 168.2, 264.88, 160.71, 585.68, 263.73,
                  258.76, 240.0, 335.46, 192.94, 392.98, 153.56, 130.12, 204.8, 232.24, 270.87, 234.25, 240.45, 300.17, 218.93, 313.09, 
                  253.34, 213.41, 218.3, 256.55, 293.78, 260.01, 317.7, 274.27, 303.3],
               5:[885.85, 790.93, 506.19, 537.82, 274.22, 790.93, 380.47, 329.07, 727.66, 727.66, 1044.04, 854.21, 822.57, 822.57, 828.13, 
                  759.29, 949.13, 1012.4, 1170.6, 492.38, 783.36, 759.29, 727.66, 822.57, 949.13, 604.3, 676.49, 1107.32]}

group_Ds_mag_flower = {3: [25.87, 45.27, 10.25, 15.11, 39.16, 13.5, 56.96, 8.95, 23.2, 45.98, 19.18, 68.02, 20.4, 36.48, 16.86, 65.88, 19.44,
                    22.85, 24.4, 20.59, 8.15, 35.68, 14.56, 8.92, 71.73, 70.52, 12.77, 7.5, 27.75, 9.92, 7.03, 31.54, 2.23, 12.76, 6.03, 
                    51.97, 38.16, 12.8, 33.98, 30.6, 4.93, 24.48, 19.73, 11.51, 14.56, 79.37, 19.48, 48.67, 29.99, 25.31, 8.96, 26.63, 
                    15.17, 15.61, 23.2],
               4:[63.25, 63.25, 31.61, 31.61, 22.34, 63.25, 63.25, 
    44.72, -0.03, 31.61, 63.25, 31.61, 31.61, 31.61, 
    22.34, -0.04, -0.04, 31.61, 63.25, -0.05, 94.88, 
    31.61, 14.11, 134.25, -0.03, 31.61, -0.06, -0.03, 
    -0.05, 18.23, -0.04, 109.65, 31.61, 31.61, -0.05, 
    22.34, 54.80, 31.61, -0.04]}

input_files = [
    '/Users/jiachenli/Desktop/Fig_supp_data//morning_glory/morning_glory_same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data//morning_glory/morning_glory_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data//morning_glory/morning_glory_same_magnitude.txt'
]

group_D_sets = [group_Ds_deg_flower, group_Ds_dir_flower, group_Ds_mag_flower]

bar_colors = ['dodgerblue', 'orange', 'red']

title = 'Morning glory with herbicide'

fig, axes = plt.subplots(1, 3, figsize=(45, 14))

for ax, infile, Ds, color in zip(axes, input_files, group_D_sets, bar_colors):
    plot_combined(
        output_file=infile,
        group_Ds=Ds,
        title=title,
        bar_color=color,    
        point_color=color,   
        ax=ax
    )

plt.tight_layout()
plt.show()


# # Fig S8

# In[66]:


def _mean_obs_at_n2(path):
    df = pd.read_csv(path, sep="\t")
    def _n(s): return len([p.strip() for p in str(s).split(',') if p.strip()])
    df2 = df[df['Strain Combination'].apply(_n) == 2]
    if df2.empty: return np.nan
    return (df2['Observed Ratio (%)']/100.0).mean()

def plot_between_env(output_file, bar_color, z_scores=None, baseline_files=None, baseline_labels=None,
                     figsize=(12, 10), group_spacing=2.0, bar_width=0.6, dot_offset=0.7, dot_jitter=0.02,
                     err_elinewidth=3, err_capthick=3, tick_font=28, dot_size=140):
    data = pd.read_csv(output_file, sep="\t")
    group_obs, group_sim = {}, {}
    for _, row in data.iterrows():
        n = len([p.strip() for p in str(row['Strain Combination']).split(',') if p.strip()])
        group_obs.setdefault(n, []).append(row['Observed Ratio (%)'] / 100.0)
        group_sim.setdefault(n, []).append(row['Simulated Mean (%)'] / 100.0)

    Ns = sorted(group_obs)
    obs_means = [np.mean(group_obs[n]) for n in Ns]
    sim_means = [np.mean(group_sim[n]) for n in Ns]
    obs_ses   = [np.std(group_obs[n], ddof=1)/np.sqrt(len(group_obs[n])) if len(group_obs[n])>1 else 0 for n in Ns]
    sim_ses   = [np.std(group_sim[n], ddof=1)/np.sqrt(len(group_sim[n])) if len(group_sim[n])>1 else 0 for n in Ns]

    x = np.arange(len(Ns), dtype=float) * group_spacing
    w = bar_width

    fig, ax1 = plt.subplots(figsize=figsize)
    err_kwargs = dict(elinewidth=err_elinewidth, capthick=err_capthick, capsize=10)
    ax1.bar(x - w/2, obs_means, w, yerr=obs_ses, error_kw=err_kwargs, color=bar_color)
    ax1.bar(x + w/2, sim_means, w, yerr=sim_ses, error_kw=err_kwargs, color='grey')

    ax1.set_xticks(x)
    ax1.set_xticklabels([f"{n} lines" for n in Ns], fontsize=tick_font)
    ax1.set_ylabel("Mean Diceâ€™s coefficient", fontsize=tick_font)
    ax1.tick_params(axis='y', labelsize=tick_font, length=10, width=3)
    ax1.tick_params(axis='x', labelsize=tick_font, length=10, width=3)

    if z_scores:
        ax2 = ax1.twinx()
        for i, n in enumerate(Ns):
            Ds = np.array(z_scores.get(n, []), dtype=float)
            if Ds.size == 0:
                continue
            xpos_base = x[i] + w/2 + dot_offset
            xpos = xpos_base + np.random.normal(scale=dot_jitter, size=Ds.size)
            colors = np.where(Ds < 1.96, "grey", bar_color)
            ax2.scatter(xpos, Ds, c=colors, s=dot_size, alpha=0.9, edgecolors=colors, zorder=10)
        ax2.set_ylim(-2, None)
        ax2.set_ylabel(r"$\it{Z}$-score", fontsize=tick_font)
        ax2.tick_params(axis='y', labelsize=tick_font, length=10, width=3)
        sns.despine(ax=ax2, top=True, left=False)

    if baseline_files and baseline_labels:
        y1 = _mean_obs_at_n2(baseline_files[0])
        y2 = _mean_obs_at_n2(baseline_files[1])
        if not np.isnan(y1): ax1.axhline(y1, color=bar_color, linewidth=3, zorder=5)
        if not np.isnan(y2): ax1.axhline(y2, color=bar_color, linewidth=3, zorder=5)

        if not (np.isnan(y1) or np.isnan(y2)):
            hi, lo = (y1, y2) if y1 >= y2 else (y2, y1)
            hi_lab, lo_lab = (baseline_labels[0], baseline_labels[1]) if y1 >= y2 else (baseline_labels[1], baseline_labels[0])

            xmid = float(np.mean(x)) if len(x) else 0.5
            pad_between = 0.04  
            y_top = max(np.array(obs_means) + np.array([s if not np.isnan(s) else 0 for s in obs_ses])) + pad_between
            
            x_label_pos = 0.5
            min_vgap = 0.015
            if abs(hi - lo) < min_vgap:
                lo = hi - min_vgap

            ax1.text(x_label_pos, hi, hi_lab, transform=ax1.get_yaxis_transform(),
                     ha="left", va="center", fontsize=tick_font-4, color="black",
                     bbox=dict(facecolor='white', alpha=0.85, edgecolor='none', pad=2))
            ax1.text(x_label_pos, lo, lo_lab, transform=ax1.get_yaxis_transform(),
                     ha="left", va="center", fontsize=tick_font-4, color="black",
                     bbox=dict(facecolor='white', alpha=0.85, edgecolor='none', pad=2))

            ax1.text(xmid, y_top, "NaCl vs. H$_2$O$_2$", ha="center", va="bottom",
                     fontsize=tick_font-2, color="black",
                     bbox=dict(facecolor='white', alpha=0.85, edgecolor='none', pad=2), zorder=20)

    sns.despine(ax=ax1, top=True, right=False, left=False, bottom=False)
    plt.tight_layout()
    plt.show()


base = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/FigS8_between_envs"
file_deg = f"{base}/salt_h2o2_same_genes.txt"
file_dir = f"{base}/salt_h2o2_same_direction.txt"
file_mag = f"{base}/salt_h2o2_same_magnitude.txt"
salt_deg = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/salt_same_genes.txt"
h2o2_deg = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/h2o2_same_genes.txt"
salt_dir = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/salt_same_direction.txt"
h2o2_dir = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/h2o2_same_direction.txt"
salt_mag = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/salt_same_magnitude.txt"
h2o2_mag = "/Users/jiachenli/Desktop/Fig_supp_data/yeast/h2o2_same_magnitude.txt"
group_Ds_salt_h2o2_deg = {2:[11.19, 10.97, 11.08, 16.53, 17.3, 17.6, 20.04, 21.08, 20.44]}
group_Ds_salt_h2o2_dir = {2:[7.80, 9.53, 8.38, 22.98, 20.95, 21.69, 26.65, 27.81, 27.75]}
group_Ds_salt_h2o2_mag = {2:[]}
plot_between_env(file_deg, "dodgerblue", group_Ds_salt_h2o2_deg, (salt_deg, h2o2_deg), ("NaCl vs. NaCl", "H$_2$O$_2$ vs. H$_2$O$_2$"))
plot_between_env(file_dir, "orange", group_Ds_salt_h2o2_dir, (salt_dir, h2o2_dir), ("NaCl vs. NaCl", "H$_2$O$_2$ vs. H$_2$O$_2$"))
plot_between_env(file_mag, "red", group_Ds_salt_h2o2_mag, (salt_mag, h2o2_mag), ("NaCl vs. NaCl", "H$_2$O$_2$ vs. H$_2$O$_2$"))


# # Fig S9

# In[67]:


def plot_combined_S9(output_file,
                  group_Ds,
                  bar_colors=('dodgerblue', 'grey'),
                  point_color='dodgerblue',
                  figsize=(18, 14),
                  group_spacing=2.0,
                  bar_width=0.6,
                  dot_offset=0.7,
                  dot_jitter=0.02,
                  error_elinewidth=3,
                  error_capthick=3,
                  save_path=None):

    data = pd.read_csv(output_file, sep="\t")
    group_obs, group_sim = {}, {}
    for _, row in data.iterrows():
        n = len(row['Strain Combination'].split(','))
        group_obs.setdefault(n, []).append(row['Observed Ratio (%)'] / 100)
        group_sim.setdefault(n, []).append(row['Simulated Mean (%)'] / 100)

    Ns = sorted(group_obs)
    obs_means = [np.mean(group_obs[n]) for n in Ns]
    sim_means = [np.mean(group_sim[n]) for n in Ns]
    obs_ses   = [np.std(group_obs[n], ddof=1)/np.sqrt(len(group_obs[n])) for n in Ns]
    sim_ses   = [np.std(group_sim[n], ddof=1)/np.sqrt(len(group_sim[n])) for n in Ns]

    x = np.arange(len(Ns)) * group_spacing
    width = bar_width

    fig, ax1 = plt.subplots(figsize=figsize)
    err_kwargs = dict(elinewidth=error_elinewidth, capthick=error_capthick, capsize=10)

    ax1.bar(x - width/2, obs_means, width, yerr=obs_ses, error_kw=err_kwargs,
            color=bar_colors[0], label="Observed mean")
    ax1.bar(x + width/2, sim_means, width, yerr=sim_ses, error_kw=err_kwargs,
            color=bar_colors[1], label="Simulated mean")

    ax1.set_ylabel("Mean Diceâ€™s coefficient", fontsize=54)

    y1, y2 = 0.437, 0.314
    ax1.axhline(y1, color='dodgerblue', linewidth=3)
    ax1.axhline(y2, color='dodgerblue', linewidth=3)

    x_label_pos = 0.5
    ax1.text(x_label_pos, y1 + 0.005, 'MCL vs. MCL',
             transform=ax1.get_yaxis_transform(),
             ha='left', va='bottom', fontsize=54, color='black',
             bbox=dict(facecolor='white', alpha=0.8, edgecolor='none', pad=2))
    ax1.text(x_label_pos, y2 - 0.005, 'BuOH vs. BuOH',
             transform=ax1.get_yaxis_transform(),
             ha='left', va='top', fontsize=54, color='black',
             bbox=dict(facecolor='white', alpha=0.8, edgecolor='none', pad=2))

    pad_above = 0.04
    y_top = max(np.array(obs_means) + np.array(obs_ses)) + pad_above
    xmid = np.mean(x)
    ax1.text(xmid, y_top, 'BuOH vs. MCL',
             ha='center', va='bottom', fontsize=54, color='black',
             bbox=dict(facecolor='white', alpha=0.85, edgecolor='none', pad=2))

    ax1.set_xticks(x)
    ax1.set_xticklabels([f"{n} lines" for n in Ns], fontsize=54)
    ax1.tick_params(axis='y', labelsize=54, length=10, width=3)
    ax1.tick_params(axis='x', labelsize=54, length=10, width=3)

    sns.despine(ax=ax1, top=True, right=False, left=False, bottom=False)
    plt.tight_layout()

    if save_path:
        plt.savefig(save_path, dpi=300)
    plt.show()
    return fig, ax1


# === Example ===
fig, ax1 = plot_combined_S9(
    output_file='/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/FigS9_between_envs/FigS9a_BuOH_vs_MCL.txt',
    group_Ds=None,
    point_color='dodgerblue',
)

### Fig S9 b,c,d

deg_dice = [43.2,21.7,45.3,59.9,30.7,7.56,34.1,62.8,43.7,25.3,48.2]
dir_dice = [43.2,21.7,45.3,60.0,27.9,7.6,34.1,62.8,43.7,25.3,48.9]
mag_dice = [43.2,20.6,44.9,58.4,27.9,7.56,34.1,62.8,43.7,24.9,48.2]

paths = {
    "DEG": "/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/FigS9_between_envs/same_genes.txt",
    "Direction": "/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/FigS9_between_envs/same_direction.txt",
    "Magnitude": "/Users/jiachenli/Desktop/Fig_supp_data/ecoli_11_envs/FigS9_between_envs/same_magnitude.txt",
}

envs = ["NaCl","KCl","CoCl2","Na2CO3","Lac","Mal","MCL","MG","BuOH","CPC","Cro"]

dice_maps = {
    "DEG": dict(zip(envs, deg_dice)),
    "Direction": dict(zip(envs, dir_dice)),
    "Magnitude": dict(zip(envs, mag_dice)),
}

def average_by_pair(df: pd.DataFrame) -> dict:
    tmp = df.copy()
    tmp['Strain1'] = tmp['Strain Combination'].str.split(',').str[0].str.split('-').str[0]
    tmp['Strain2'] = tmp['Strain Combination'].str.split(',').str[1].str.split('-').str[0]
    return tmp.groupby(['Strain1','Strain2'])['Observed Ratio (%)'].mean().to_dict()

def compute_ratios(avg_dict: dict, env_to_dice: dict) -> list:
    ratios = []
    for (e1, e2), avg in avg_dict.items():
        mean_single = np.mean([env_to_dice[e1], env_to_dice[e2]])
        ratios.append(avg / mean_single)
    return ratios

colors = {"DEG": "dodgerblue", "Direction": "orange", "Magnitude": "red"}

for label, fp in paths.items():
    df = pd.read_csv(fp, sep="\t")
    avg_pairs = average_by_pair(df)
    ratios = compute_ratios(avg_pairs, dice_maps[label])
    plt.figure()
    plt.hist(ratios, bins=20, color=colors[label], edgecolor='black')
    plt.xlabel("Ratio", fontsize=16)
    plt.ylabel("Frequency", fontsize=16)
    plt.tick_params(axis='both', labelsize=12, length=5, width=1)
    plt.tight_layout()
    sns.despine()
    plt.show()


# # Fig S10

# In[68]:


## Fig S10

gly_2_d = [14.67, 5.98, 9.39, 4.03, 7.56, 9.54, 6.75, 9.79, 3.53, 6.97, 9.35, 57.26, 17.19, 38.47, 31.12, 13.0, 34.2, 36.65, 23.46, 8.09, 43.25]
lac_2_d = [30.20, 15.48, 31.51, 20.20, 31.01, 13.39, 13.81, 13.95, 22.78, 20.72, 15.68, 27.83, 34.13, 34.69, 34.30, 31.07, 48.68, 3.79, 37.71, 10.99, 9.76]
group_Ds_dir_gly = {2: gly_2_d, 3: [-0.03, -0.03, -0.04, -0.03, 31.61, 379.63]}
group_Ds_dir_lac = {2: lac_2_d}
group_Ds_deg_gly = {2: [14.67, 5.98, 9.39, 4.03, 7.56, 9.54, 6.75, 9.79, 3.53, 6.97, 9.35, 57.26, 17.19, 38.47, 31.12, 13.0, 34.2, 36.65, 23.46, 8.09, 43.25],
                    3:[-0.03, 15.78, -0.05, 63.25, -0.04, 67.1, 15.78, 54.8, 94.88, 31.61, 126.52, 126.52, 126.52, 31.61, 31.61]}
group_Ds_deg_lac = {2: [30.2, 15.48, 31.51, 20.2, 31.01, 13.39, 13.81, 13.95, 22.78, 20.72, 15.68, 27.83, 34.13, 34.69, 34.3, 31.07, 48.68, 3.79, 37.71, 10.99, 9.76],
                    3:[31.61, 189.8, 189.8, -0.03, 94.88, 67.1, 63.25, 221.44]}
group_Ds_mag_gly = {2:[20.24, 10.66, 14.56, 4.72, 11.55, 14.14, 2.36, 5.12, -0.22, 2.54, 3.13, 79.28, 19.1, 68.55, 48.32, 19.73, 54.38, 62.62, 33.55, 21.08, 79.57],
                    3: [-0.03, -0.03, -0.03, 89.49]}
group_Ds_mag_lac = {2: [37.38, 23.66, 31.87, 27.36, 38.27, 17.7, 23.08, 14.13, 33.85, 38.77, 25.41, 27.4, 51.27, 43.82, 35.0, 48.12, 55.79, -0.13, 66.56, 11.36, 6.38]}
group_Ds_glylac_deg = {2: [10.77, 4.36, -0.29, 3.44, -0.32, -0.21, -0.24, 7.68, 9.59, 12.95, 5.79, 8.2, 6.8, 4.64, 21.77, 16.73, 24.35, 19.02, 25.23, 24.75, 6.85, 25.61, 15.17, 26.02, 26.4, 26.98, 27.25, 6.45, 7.84, 4.23, 3.99, -0.28, -0.29, -0.25, 7.34, 23.73, 7.91, 21.25, 19.62, 18.41, 26.99, 7.39, 29.37, 11.75, 30.41, 31.29, 22.45, 35.0, 10.39]}
group_Ds_glylac_dir = {2: [13.23, 6.25, -0.18, 4.45, -0.23, -0.16, -0.18, 2.31, 3.22, -0.38, -0.41, -0.42, -0.38, -0.32, 30.63, 18.85, 37.26, 40.21, 33.64, 43.82, 10.85, 34.08, 20.69, 40.07, 35.73, 37.71, 43.96, 10.4, 11.55, 5.41, 14.11, -0.07, -0.23, -0.05, 14.91, 37.38, 12.65, 31.54, 29.04, 26.22, 32.86, 11.17, 36.2, 16.9, 29.7, 33.08, 33.4, 40.75, 15.81]}
group_Ds_glylac_mag = {2: []}

def _summarize(path):
    df = pd.read_csv(path, sep="\t")
    go, gs = {}, {}
    for _, row in df.iterrows():
        n = len([p.strip() for p in str(row["Strain Combination"]).split(",") if p.strip()])
        go.setdefault(n, []).append(row["Observed Ratio (%)"] / 100)
        gs.setdefault(n, []).append(row["Simulated Mean (%)"] / 100)
    Ns = sorted(go)
    obs_means = [np.mean(go[n]) for n in Ns]
    sim_means = [np.mean(gs[n]) for n in Ns]
    obs_ses = [np.std(go[n], ddof=1) / np.sqrt(len(go[n])) if len(go[n])>1 else 0 for n in Ns]
    sim_ses = [np.std(gs[n], ddof=1) / np.sqrt(len(gs[n])) if len(gs[n])>1 else 0 for n in Ns]
    return Ns, obs_means, sim_means, obs_ses, sim_ses, go

def _panel(ax1, output_file, group_Ds, bar_color, point_color, group_spacing=2.0, bar_width=0.6, dot_offset=0.7, dot_jitter=0.02, error_elinewidth=3, error_capthick=3, tick_font=24, dot_size=110):
    Ns, obs_means, sim_means, obs_ses, sim_ses, go = _summarize(output_file)
    base_x = np.arange(len(Ns), dtype=float)
    x = base_x * group_spacing
    w = bar_width
    err_kwargs = dict(elinewidth=error_elinewidth, capthick=error_capthick, capsize=10)
    ax1.bar(x - w/2, obs_means, w, yerr=obs_ses, error_kw=err_kwargs, color=bar_color)
    ax1.bar(x + w/2, sim_means, w, yerr=sim_ses, error_kw=err_kwargs, color="grey")
    ax1.set_xticks(x)
    ax1.set_xticklabels([f"{n} lines" for n in Ns], fontsize=tick_font, rotation=30)
    ax1.tick_params(axis="y", labelsize=tick_font, length=10, width=2.5)
    ax1.tick_params(axis="x", labelsize=tick_font, length=10, width=2.5)
    ax2 = ax1.twinx()
    for i, n in enumerate(Ns):
        Ds = np.array(group_Ds.get(n, []), dtype=float)
        if Ds.size == 0: continue
        xpos_base = x[i] + w/2 + dot_offset
        xpos = xpos_base + np.random.normal(scale=dot_jitter, size=Ds.size)
        colors = np.where(Ds < 1.96, "grey", point_color)
        ax2.scatter(xpos, Ds, c=colors, alpha=0.9, s=dot_size, edgecolors=colors, zorder=15)
    ax2.set_ylim(-2, None)
    ax2.set_ylabel(r"$\it{Z}$-score", fontsize=tick_font)
    ax2.tick_params(axis="y", labelsize=tick_font, length=10, width=2.5)
    ax2.tick_params(axis="x", labelsize=tick_font, length=10, width=2.5)
    sns.despine(ax=ax1, top=True, right=False, left=False, bottom=False)
    sns.despine(ax=ax2, top=True, right=False, left=False, bottom=False)
    return Ns, x, w, obs_means, obs_ses, go

data_dir = Path("/Users/jiachenli/Desktop/Fig_supp_data/ecoli_gly_lac_log2/")

rows = [
    ("same_genes", "dodgerblue",
     {"gly": "gly_same_genes.txt", "lac": "lac_same_genes.txt", "gly_lac": "gly_lac_same_genes.txt"},
     {"gly": group_Ds_deg_gly, "lac": group_Ds_deg_lac, "gly_lac": group_Ds_glylac_deg}),
    ("same_direction", "orange",
     {"gly": "gly_same_direction.txt", "lac": "lac_same_direction.txt", "gly_lac": "gly_lac_same_direction.txt"},
     {"gly": group_Ds_dir_gly, "lac": group_Ds_dir_lac, "gly_lac": group_Ds_glylac_dir}),
    ("same_magnitude", "red",
     {"gly": "gly_same_magnitude.txt", "lac": "lac_same_magnitude.txt", "gly_lac": "gly_lac_same_magnitude.txt"},
     {"gly": group_Ds_mag_gly, "lac": group_Ds_mag_lac, "gly_lac": group_Ds_glylac_mag}),
]

col_titles = [
    ("gly",     r"$\it{E.\ coli}$ in glycerol medium"),
    ("lac",     r"$\it{E.\ coli}$ in lactate medium"),
    ("gly_lac", None),
]

fig, axes = plt.subplots(3, 3, figsize=(30, 22), gridspec_kw={"wspace": 0.28, "hspace": 0.65})

for r, (metric_key, color, file_map, z_map) in enumerate(rows):
    for c, (col_key, col_title) in enumerate(col_titles):
        ax1 = axes[r, c]
        fpath = data_dir / file_map[col_key]
        zdict = z_map[col_key]
        Ns, x, w, obs_means, obs_ses, _ = _panel(ax1, str(fpath), zdict, color, color, tick_font=24, dot_size=110)
        if col_title:
            ax1.set_title(col_title, fontsize=28, pad=10)
        if c == 0:
            ax1.set_ylabel("Mean Diceâ€™s coefficient", fontsize=24)
        else:
            ax1.set_ylabel("")
        if c == 2 and len(obs_means) > 0:
            y_top = max(np.array(obs_means) + np.array([s if not np.isnan(s) else 0 for s in obs_ses])) + 0.02
            x_shift = -0.25
            ax1.text(np.mean(x) + x_shift, y_top, "gly vs. lac", ha="center", va="bottom", fontsize=22, color="black", zorder=20)
            gly_path = data_dir / file_map["gly"]
            lac_path = data_dir / file_map["lac"]
            _, _, _, _, _, go_gly = _summarize(gly_path)
            _, _, _, _, _, go_lac = _summarize(lac_path)
            gly_mean_2 = np.mean(go_gly.get(2, [np.nan]))
            lac_mean_2 = np.mean(go_lac.get(2, [np.nan]))
            if not np.isnan(gly_mean_2):
                ax1.axhline(gly_mean_2, color=color, linewidth=3)
            if not np.isnan(lac_mean_2):
                ax1.axhline(lac_mean_2, color=color, linewidth=3)
            if not np.isnan(gly_mean_2) and not np.isnan(lac_mean_2):
                hi, lo = max(gly_mean_2, lac_mean_2), min(gly_mean_2, lac_mean_2)
                if metric_key in ("same_genes", "same_direction"):
                    ax1.text(np.mean(x), hi + 0.012, "gly vs. gly", ha="center", va="bottom", fontsize=22, color="black")
                    ax1.text(np.mean(x), lo - 0.012, "lac vs. lac", ha="center", va="top", fontsize=22, color="black")
                else:
                    ax1.text(np.mean(x), gly_mean_2 + 0.012, "Gly vs. gly", ha="center", va="bottom", fontsize=22, color="black")
                    ax1.text(np.mean(x), lac_mean_2 + 0.012, "Lac vs. lac", ha="center", va="bottom", fontsize=22, color="black")

plt.subplots_adjust(left=0.07, right=0.98, top=0.92, bottom=0.08, wspace=0.28, hspace=0.7)
plt.show()


# # Fig S11

# In[69]:


mag_frac = pd.read_csv('/Users/jiachenli/Desktop/repeatable_evolution/Results/lenski_elife/use_log2_2/mag_frac_0507.txt', sep='\t')
deg_frac = pd.read_csv('/Users/jiachenli/Desktop/repeatable_evolution/Results/lenski_elife/use_log2_2/DEG/evolution_ratios_deg_D.txt', sep='\t')

def _count_members(s):
    s = str(s)
    if not s:
        return 0
    return len([p.strip() for p in s.split(',') if p.strip()])

mag_frac['n_strains'] = mag_frac['Strain Combination'].apply(_count_members)
deg_frac['n_strains'] = deg_frac['Strain Combination'].apply(_count_members)

def make_group(ds_df):
    out = {k: [] for k in range(2, 12)}
    for k in out.keys():
        out[k] = ds_df.loc[ds_df['n_strains'] == k, 'D'].astype(float).tolist()
    return out

group_Ds_mag_fl = make_group(mag_frac)
group_Ds_deg_fl = make_group(deg_frac)

file_path = "/Users/jiachenli/Desktop/repeatable_evolution/Results/lenski_elife/use_log2_2/d_values.txt"
d_values_by_length = {}
with open(file_path, "r") as f:
    for line in f:
        line = line.strip()
        if not line:
            continue
        m_tuple = re.search(r"^\((.*?)\)", line)
        if not m_tuple:
            continue
        tuple_len = len([it.strip() for it in m_tuple.group(1).split(",") if it.strip()])
        m_d = re.search(r"D\s*=\s*([+-]?(\d+(\.\d*)?|\.\d+))", line)
        if not m_d:
            continue
        d_val = float(m_d.group(1))
        d_values_by_length.setdefault(tuple_len, []).append(d_val)

group_Ds_dir_fl = {k: d_values_by_length.get(k, []) for k in range(2, 12)}

input_files = [
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/FigS11/same_genes.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/ecoli_LTEE_same_direction.txt',
    '/Users/jiachenli/Desktop/Fig_supp_data/ecoli_LTEE/ecoli_LTEE_same_magnitude.txt'
]

group_D_sets = [group_Ds_deg_fl, group_Ds_dir_fl, group_Ds_mag_fl]
bar_colors = ['dodgerblue', 'orange', 'red']
title = '$\it{E.\ coli}$ LTEE'

fig, axes = plt.subplots(1, 3, figsize=(45, 14))
for ax, infile, Ds, color in zip(axes, input_files, group_D_sets, bar_colors):
    plot_combined(output_file=infile, group_Ds=Ds, title=title, bar_color=color, point_color=color, ax=ax)
plt.tight_layout()
plt.show()

